{"version":3,"file":"static/js/684.32743e1b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieSearch/MoviesSearch.module.css?f311","components/MovieSearch/MovieSearch.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","webpack://react-homework-template/./src/components/ScrollTop/ScrollTop.module.css?2f3a","components/ScrollTop/ScrollTop.jsx","webpack://react-homework-template/./src/components/SeachBar/SeachBar.module.css?46c8","components/SeachBar/SeachBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieSearchCont\":\"MoviesSearch_movieSearchCont__e+1Rp\",\"movieSearchList\":\"MoviesSearch_movieSearchList__Pa4k3\",\"movieSearchLink\":\"MoviesSearch_movieSearchLink__aVWii\",\"movieSearchImgCont\":\"MoviesSearch_movieSearchImgCont__mp34M\",\"movieSearchImg\":\"MoviesSearch_movieSearchImg__WHNHd\",\"movieSearchInfoCont\":\"MoviesSearch_movieSearchInfoCont__2sdwE\",\"movieSearchTitle\":\"MoviesSearch_movieSearchTitle__nrdY2\",\"movieSearchDate\":\"MoviesSearch_movieSearchDate__zZXS6\"};","import { convertDate } from 'components/help/convertDate';\nimport { Link, useLocation } from 'react-router-dom';\nimport placeholder from '../../img/image.webp';\nimport css from './MoviesSearch.module.css';\n\nfunction MovieSearch({ movies, path = '' }) {\n  const location = useLocation();\n  return (\n    <div className={css.movieSearchCont}>\n      <ul className={css.movieSearchList}>\n        {movies.map(({ id, title, poster_path, release_date }) => {\n          const movieTitle =\n            title.length < 45 ? title : `${title.slice(0, 45)}...`;\n          const formattedDate = convertDate(release_date);\n          return (\n            <li key={id} className={css.movieSearchList}>\n              <Link\n                className={css.movieSearchLink}\n                to={`${path}${id}`}\n                state={{ from: location }}\n              >\n                <div className={css.movieSearchImgCont}>\n                  <img\n                    className={css.movieSearchImg}\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n                        : `${placeholder}`\n                    }\n                    alt={title}\n                  />\n                </div>\n                <div className={css.movieSearchInfoCont}>\n                  <h2 className={css.movieSearchTitle}>{movieTitle}</h2>\n                  <p className={css.movieSearchDate}>\n                    {release_date && formattedDate}\n                  </p>\n                </div>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default MovieSearch;\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonCont\":\"Movies_buttonCont__ErXkf\",\"loadMore\":\"Movies_loadMore__BPGuv\"};","// extracted by mini-css-extract-plugin\nexport default {\"toTop\":\"ScrollTop_toTop__oC5k7\",\"butToTop\":\"ScrollTop_butToTop__ThDn8\"};","import { useEffect, useState } from 'react';\nimport * as Scroll from 'react-scroll';\nimport { FaArrowUp } from 'react-icons/fa'; // Импорт иконки стрелки вверх\nimport css from './ScrollTop.module.css';\n\nconst scroll = Scroll.animateScroll;\n\nexport function ScrollTop() {\n  const [isBtnShow, setIsBtnShow] = useState(false);\n  const scrollToTop = () => scroll.scrollToTop();\n\n  useEffect(() => {\n    const onScrollBtnShow = () =>\n      window.scrollY > 100 ? setIsBtnShow(true) : setIsBtnShow(false);\n\n    window.addEventListener('scroll', onScrollBtnShow);\n\n    return () => {\n      window.removeEventListener('scroll', onScrollBtnShow);\n    };\n  }, []);\n\n  return (\n    isBtnShow && (\n      <div className={css.toTop}>\n        <button className={css.butToTop} onClick={scrollToTop}>\n          <FaArrowUp />\n        </button>\n      </div>\n    )\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"seachCont\":\"SeachBar_seachCont__W3asI\",\"seachForm\":\"SeachBar_seachForm__5ipyX\",\"seachInput\":\"SeachBar_seachInput__QeHgm\",\"seachButton\":\"SeachBar_seachButton__QXg0s\"};","import Notiflix from 'notiflix';\nimport { useState } from 'react';\nimport css from './SeachBar.module.css';\n\nfunction Searchbar({ onSubmit, isLoading }) {\n  const [query, setQuery] = useState('');\n\n  const handleInput = e => setQuery(e.target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (query.trim() === '') {\n      Notiflix.Notify.failure('Please enter something to search...');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n    Notiflix.Notify.success('Movie ist load....enjoy))');\n  };\n\n  return (\n    <div className={css.seachCont}>\n      <form className={css.seachForm} onSubmit={handleSubmit}>\n        <input\n          name=\"query\"\n          type=\"text\"\n          value={query}\n          onChange={handleInput}\n          placeholder=\"Search movies\"\n          autoComplete=\"off\"\n          autoFocus\n          className={css.seachInput}\n        />\n        <button className={css.seachButton} type=\"submit\" disabled={isLoading}>\n          Search\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Searchbar;\n","import Loader from 'components/Loader/Loader';\nimport MovieSearch from 'components/MovieSearch/MovieSearch';\nimport css from './Movies.module.css';\n\nimport { ScrollTop } from 'components/ScrollTop/ScrollTop';\nimport Searchbar from 'components/SeachBar/SeachBar';\nimport Notiflix from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovies } from 'services/movies-api';\n\nvar Scroll = require('react-scroll');\nvar scroll = Scroll.animateScroll;\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryParams = searchParams.get('query') ?? '';\n  const handleLoadMore = () => {\n    setPage(p => p + 1);\n    scroll.scrollMore(350);\n  };\n\n  const onSubmit = query => {\n    if (queryParams === query) {\n      Notiflix.Notify.failure(`You are already searching - ${query}`);\n      return;\n    }\n    setSearchParams(query ? { query } : {});\n    setMovies([]);\n    setError(false);\n    setPage(1);\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const fetchMovies = async (query, page) => {\n      try {\n        setIsLoading(true);\n\n        const normalizedQuery = query.toLowerCase().trim();\n        const { results: fetchedMovies, total_pages } = await getMovies(\n          normalizedQuery,\n          signal,\n          page\n        );\n\n        if (!fetchedMovies.length && normalizedQuery) {\n          Notiflix.Notify.failure('No movies found');\n          setSearchParams({});\n          return;\n        }\n\n        setMovies(m => [...m, ...fetchedMovies]);\n        setTotalPages(total_pages);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (queryParams) fetchMovies(queryParams, page);\n\n    return () => {\n      controller.abort();\n    };\n  }, [queryParams, setSearchParams, page]);\n\n  return (\n    <div>\n      <Searchbar\n        onSubmit={onSubmit}\n        value={queryParams}\n        isLoading={isLoading}\n      />\n      {movies.length > 0 && (\n        <div className={css.buttonCont}>\n          <MovieSearch movies={movies} />\n          {page !== totalPages && (\n            <button\n              className={css.loadMore}\n              type=\"button\"\n              onClick={handleLoadMore}\n              disabled={isLoading ? true : false}\n            >\n              Load more\n            </button>\n          )}\n          <ScrollTop />\n        </div>\n      )}\n      {isLoading && <Loader />}\n      {error &&\n        Notiflix.Notify.failure(\n          'Oops, something went wrong...Try again later!'\n        )}\n    </div>\n  );\n}\n"],"names":["movies","path","location","useLocation","className","css","map","id","title","poster_path","release_date","movieTitle","length","slice","formattedDate","convertDate","to","state","from","src","placeholder","alt","scroll","Scroll","ScrollTop","useState","isBtnShow","setIsBtnShow","useEffect","onScrollBtnShow","window","scrollY","addEventListener","removeEventListener","onClick","scrollToTop","onSubmit","isLoading","query","setQuery","e","preventDefault","trim","Notiflix","name","type","value","onChange","target","autoComplete","autoFocus","disabled","require","animateScroll","Movies","setMovies","page","setPage","totalPages","setTotalPages","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","queryParams","get","controller","AbortController","signal","fetchMovies","normalizedQuery","toLowerCase","getMovies","fetchedMovies","results","total_pages","m","code","abort","p","scrollMore","Loader"],"sourceRoot":""}